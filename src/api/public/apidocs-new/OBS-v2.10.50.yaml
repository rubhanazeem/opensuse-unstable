openapi: 3.0.0

servers:
  - url: '/'

tags:
  - name: General Information
  - name: Attributes
  - name: Attribute Namespaces
  - name: Build
  - name: Configuration
  - name: Distributions
  - name: Groups
  - name: Issue Trackers
  - name: Person
  - name: Published Binaries
  - name: Request
    description: |
      Please, before using request endpoints, make sure you have read and understood the "Request and Review System" section of
      the [user guide](https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.request_and_review_system.html).

      In the next sections you will see how calls to request endpoints could be combined to fullfill different workflows.

      ## Workflow 1: Create a Submit Request from Package A to Package B

      The steps described in this workflow could be easily replicated with this command:
      `osc createrequest -a submit home:Admin:Origin A home:Admin:Destination B -m "Submit A to B"`

      The logic involved in the creation of a submit request will require to call more endpoints. For the sake of simplicity we suppose, that:
        - The project `home:Admin:Origin` exists, with a package `A`, and it has a file called `test.txt`.
        - The latest revision of the package `home:Admin:Origin:A` is `1`.
        - The project `home:Admin:Destination` doesn't exist.
        - There aren't any other submit requests previously created with the same source and target.

      To create a submit request, pass the following request body:
      ```
      <request>
        <action type="submit">
          <source project="home:Admin:Origin" package="A" rev="1"/>
          <target project="home:Admin:Destination" package="B"/>
        </action>
        <state name="new"/>
        <description>Submit A to B</description>
      </request>
      ```
      ... to this endpoint: `POST /request?cmd=create`


      ## Workflow 2: Review a Submit Request
      **Add a User as Reviewer of a Submit Request**

      First, we make sure that a certain user can review our submit request.
      We will add the user `test1` as a reviewer of the already created submit request.

      For the sake of simplicity we suppose, that:
        - There is already a user with login name `test1`.
        - There is already a submit request with number `33`.

      Adding the user `test1` as a reviewer of the submit request number `33` can be performed with this command:
      `osc review add -m 'Add user test1 as reviewer' -U test1 33`

      The same action can be done with this API endpoint: `POST /request/33?cmd=addreview&by_user=test1`

      **Mark a Review of a Submit Request as Accepted**

      Now that the user `test1` is a reviewer of the submit request number `33`, this user can review that submit request as `accepted`.

      To review the submit request as `accepted`, issue the following command, using for authentication the login `test1`:
      `osc review accept -m 'Accept submit request' -U test1 33`

      This can also be done with this API endpoint, using for authentication the login `test1`:
      `POST /request/33?cmd=changereviewstate&newstate=accepted&by_user=test1`


      ## Workflow 3: Approve a Submit Request

      To mark a submit request as approved means that a submit request will be automatically accepted when all the required reviews are accepted.

      For the sake of simplicity let's accept that:
        - There is already a user with the login name `test1`, which is also a maintainer of the project `home:Admin`.
        - There is already a submit request with the number `44`.
        - The user with login name `test1` is a reviewer of the submit request number `44`.

      **Note**: The following commands or endpoints should all be executed as user `test1`.

      **Mark a Submit Request as Approved**

      To mark a request as approved, execute the following command: `osc request approve -m 'Approve submit request' -U test1 44`

      This can also be done with this endpoint (as user `test1`): `POST /request/44?cmd=approve`

      **Review an Already Approved Submit Request as Accepted**

      After adding a review to this submit request with state `accepted`, the submit request will automatically be accepted.
      This is the same step that has been described previously in the last section *"Review a Submit Request as Accepted"*.

      To perform this operation with `osc`, perform the following command: `osc review accept -m 'Accept submit request' -U test1 44`

      The same can be done with the following endpoint: `POST /request/44?cmd=changereviewstate&newstate=accepted&by_user=test1`
    externalDocs:
      url: https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.request_and_review_system.html
  - name: Workers


info:
  description: |
    The _Open Build Service API_ is a XML API.

    To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.

    There is no API versioning as there is no need for it right now.

    Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations.
    In case of abuse, we will limit/remove your access.

    For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API.
    It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below)
  version: '2.10.50'
  title: Open Build Service API
  contact:
    url: 'https://openbuildservice.org/'
    name: Open Build Service
  license:
    url: 'https://github.com/openSUSE/open-build-service/blob/master/COPYING'
    name: GNU General Public License v2.0

paths:
  /about:
    $ref: 'paths/about.yaml'

  /architectures:
    $ref: 'paths/architectures.yaml'
  /architectures/{architecture_name}:
    $ref: 'paths/architectures_architecture_name.yaml'

  /attribute:
    $ref: 'paths/attribute.yaml'
  /attribute/{namespace}:
    $ref: 'paths/attribute_namespace.yaml'
  /attribute/{namespace}/_meta:
    $ref: 'paths/attribute_namespace_meta.yaml'

  /attribute/{namespace}/{attribute_name}:
    $ref: 'paths/attribute_namespace_attribute_name.yaml'
  /attribute/{namespace}/{attribute_name}/_meta:
    $ref: 'paths/attribute_namespace_attribute_name_meta.yaml'

  /build:
    $ref: 'paths/build.yaml'
  /build/{project_name}:
    $ref: 'paths/build_project_name.yaml'
  /build/{project_name}/_result:
    $ref: 'paths/build_project_name_result.yaml'
  /build/{project_name}/{repository_name}:
    $ref: 'paths/build_project_name_repository_name.yaml'
  /build/{project_name}/{repository_name}/_buildconfig:
    $ref: 'paths/build_project_name_repository_name_buildconfig.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/_builddepinfo:
    $ref: 'paths/build_project_name_repository_name_architecture_name_builddepinfo.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/_repository:
    $ref: 'paths/build_project_name_repository_name_architecture_name_repository.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_log:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_log.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_buildinfo:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_buildinfo.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_status:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_status.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_history:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_history.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_reason:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_reason.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_jobstatus:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_jobstatus.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_file_name.yaml'
  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}?view=fileinfo:
    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_file_name_view_fileinfo.yaml'

  /configuration:
    $ref: 'paths/configuration.yaml'

  /distributions:
    $ref: 'paths/distributions.yaml'
  /distributions/include_remotes:
    $ref: 'paths/distributions_include_remotes.yaml'
  /distributions/{distribution_id}:
    $ref: 'paths/distributions_distribution_id.yaml'
  /distributions/bulk_replace:
    $ref: 'paths/distributions_bulk_replace.yaml'

  /group:
    $ref: 'paths/group.yaml'
  /group/{group_title}:
    $ref: 'paths/group_group_title.yaml'

  /issue_trackers:
    $ref: 'paths/issue_trackers.yaml'
  /issue_trackers/{issue_tracker_name}:
    $ref: 'paths/issue_trackers_issue_tracker_name.yaml'
  /issue_trackers/{issue_tracker_name}/issues/{issue_name}:
    $ref: 'paths/issue_trackers_issue_tracker_name_issues_issue_name.yaml'

  /person:
    $ref: 'paths/person.yaml'
  /person/register:
    $ref: 'paths/person_register.yaml'
  /person/{login}:
    $ref: 'paths/person_login.yaml'
  /person/{login}/group:
    $ref: 'paths/person_login_group.yaml'
  /person/{login}/token:
    $ref: 'paths/person_login_token.yaml'
  /person/{login}/token/{id}:
    $ref: 'paths/person_login_token_id.yaml'

  /published:
    $ref: 'paths/published.yaml'
  /published/{project_name}:
    $ref: 'paths/published_project_name.yaml'
  /published/{project_name}/{repository_name}:
    $ref: 'paths/published_project_name_repository_name.yaml'
  /published/{project_name}/{repository_name}?view=status:
    $ref: 'paths/published_project_name_repository_name_view_status.yaml'
  /published/{project_name}/{repository_name}/{architecture_name}:
    $ref: 'paths/published_project_name_repository_name_architecture_name.yaml'
  /published/{project_name}/{repository_name}/{architecture_name}/{binary_filename}:
    $ref: 'paths/published_project_name_repository_name_architecture_name_binary_filename.yaml'
  /published/{project_name}/{repository_name}/{architecture_name}/{binary_filename}?view=ymp:
    $ref: 'paths/published_project_name_repository_name_architecture_name_binary_filename_view_ymp.yaml'

  /request:
    $ref: 'paths/request.yaml'
  /request?view=collection:
    $ref: 'paths/request_view_collection.yaml'
  /request/{id}:
    $ref: 'paths/request_id.yaml'
  /request/{id}?cmd=diff:
    $ref: 'paths/request_id_cmd_diff.yaml'

  /worker/status:
    $ref: 'paths/worker_status.yaml'
  /worker/{architecture_name}:{worker_id}:
    $ref: 'paths/worker_architecture_name_worker_id.yaml'
  /worker?cmd=checkconstraints:
    $ref: 'paths/worker_cmd_checkconstraints.yaml'

components:
  securitySchemes:
    basic_authentication:
      type: http
      scheme: basic

externalDocs:
  url: 'https://openbuildservice.org/help/'
  description: Open Build Service - Documentation
